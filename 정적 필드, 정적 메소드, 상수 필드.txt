/*정적 필드(static field)
인스턴스를 생성하지 않고 클래스 자체에서 사용되는 변수
companion object {} 안에 작성하여 정적 필드를 만듦
자바는 앞에다가static만 붙ㅇ여주면 된다 */

/*정적 메소드(static method)
메소드 또한 companion object{} 안에 작성하면 된다.
인스턴스를 생성하지 않고도 '클래스명.메소드명()'으로 호출하여 사용가능*/

/*상수 필드
정적 필드에 초깃값을 입력하고 const val로 선언
선언한 후에는 값을 변경할 수 없음
상수 필드는 대문자로 구성하는 것이 일반적
클래스 안에 상수를 정의할 때 사용*/



    class Car {	//클래스
        var color : String = ""
        var speed : Int = 0

        companion object {	//하나만 할당 되어있고 하나만 불러오기 때문에 class명을 사용 참조형 변수에 불릴 필요가 없다. 
            var carCount : Int = 0
            const val MAXSPEED : Int = 200
            const val MINSPEED : Int = 0
            fun currentCarCount() : Int {	//carCount를 반환하는 반환타입을 return 타입 다음에 적어주면 된다. 
                return carCount
            }
        }
        constructor(color: String, speed: Int) {
            this.color = color
            this.speed = speed
            carCount ++
        }
        
        constructor(speed: Int){  	//constructor 생성자	
            //메소드 오버로딩(한 클래스 내에서 메소드의 이름이 같아도 파라미터의 개수나 데이터 형식만 다르면 여러개를 선언 할 수 있다)
            this.speed = speed
        }
        constructor(){
            
        }

        fun upSpeed(value: Int){
            if(speed+value >= 200)
               speed = 200
            else
              speed = speed + value

        }
        fun downSpeed(value: Int){
            if(speed-value <=0)
              speed = 0;
            else
               speed = speed-value
        }
    } 

    fun main() {

        var myCar1 : Car = Car("빨강",0)	//생성자에서 초기화를 같이함 
        var myCar2 : Car = Car("파랑",0)
        var myCar3 : Car = Car("초록",0)

		println("생산된 차의 대수(정적 필드) ==>" +Car.carCount)
        println("생산된 차의 대수(정적 메소드) ==>"+Car.currentCarCount())
        println("차의 최고 제한 속도 ==>"+Car.MAXSPEED)
        
        println("PI의 값 ==> "+Math.PI)
        println("3의 5제곱 ==> " + Math.pow(3.0,5.0))
    }